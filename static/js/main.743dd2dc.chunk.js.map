{"version":3,"sources":["pages/Login.js","actions/index.js","components/Header.jsx","components/FormsInput.jsx","components/FormsSelect.jsx","services/API.js","actions/addCurrencies.js","actions/addExpenses.js","components/Table.jsx","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["Login","state","email","senha","button","handleChange","bind","handleClick","event","target","name","value","this","setState","test","length","btnClicked","props","htmlFor","data-testid","type","id","onChange","to","disabled","onClick","React","Component","connect","dispatch","payloadAction","payload","Header","expenses","reduce","acc","cur","currency","exchangeRates","Object","values","find","code","ask","emailGot","handleSum","user","currencies","wallet","FormsInput","FormsSelect","map","currencie","key","getAPI","a","fetch","API","json","APIjson","USDT","fail","fetchCoins","funcgetAPI","keys","fetchPrices","expense","setExpense","Table","deleteExp","description","tag","method","split","parseFloat","toFixed","deleteExpense","Wallet","handleChanges","fetchCurrencies","fetchExpenses","App","exact","path","component","Boolean","window","location","hostname","match","INITIAL_STATE","reducer","action","loading","error","filter","element","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.743dd2dc.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { setEmail } from '../actions';\nimport '../App.css';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      email: '',\n      senha: '',\n      button: true,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleChange(event) {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value,\n    }, () => {\n      const { email, senha } = this.state;\n      const sizePass = 6;\n      if (/^[\\w0-9.]+@\\w+\\.com$/.test(email) && senha.length >= sizePass) {\n        this.setState({ button: false });\n      } else {\n        this.setState({ button: true });\n      }\n    });\n  }\n\n  handleClick() {\n    const { btnClicked } = this.props;\n    const { email } = this.state;\n    btnClicked(email);\n  }\n\n  render() {\n    const { button } = this.state;\n    return (\n      <form>\n        <h1>Login</h1>\n        <label htmlFor=\"input-email\">\n          Email:\n          <input\n            data-testid=\"email-input\"\n            type=\"text\"\n            name=\"email\"\n            id=\"input-email\"\n            onChange={ this.handleChange }\n          />\n        </label>\n        <label htmlFor=\"input-password\">\n          Senha:\n          <input\n            data-testid=\"password-input\"\n            type=\"password\"\n            name=\"senha\"\n            id=\"input-password\"\n            onChange={ this.handleChange }\n          />\n        </label>\n        <Link to=\"/carteira\">\n          <button\n            type=\"button\"\n            disabled={ button }\n            onClick={ this.handleClick }\n          >\n            Entrar\n          </button>\n        </Link>\n      </form>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  btnClicked: (payloadAction) => dispatch(setEmail(payloadAction)),\n});\n\nLogin.propTypes = {\n  btnClicked: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","// Coloque aqui suas actions\nexport const SET_EMAIL = 'SET_EMAIL';\nexport const LOADING = 'LOADING';\nexport const SUCCESS = 'SUCCESS';\nexport const FAIL = 'FAIL';\nexport const ADD_EXPENSE = 'ADD_EXPENSE';\nexport const DELETE_EXPENSE = 'DELETE_EXPENSE';\n\nexport function setEmail(payload) {\n  return {\n    type: SET_EMAIL,\n    payload,\n  };\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nclass Header extends React.Component {\n  handleSum() {\n    const { expenses } = this.props;\n    const Sum = expenses.reduce((acc, cur) => {\n      const { value, currency, exchangeRates } = cur;\n      const { ask } = Object.values(exchangeRates).find(({ code }) => code === currency);\n      return acc + (value * ask);\n    }, 0);\n    return Sum;\n  }\n\n  render() {\n    const { emailGot } = this.props;\n    return (\n      <header>\n        <span data-testid=\"email-field\">\n          Olá,\n          { emailGot }\n        </span>\n        <span data-testid=\"total-field\">\n          Despesa Total: R$\n          { this.handleSum() }\n        </span>\n        <span data-testid=\"header-currency-field\">BRL</span>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  emailGot: state.user.email,\n  currencies: state.wallet.currencies,\n  expenses: state.wallet.expenses,\n  exchangeRates: state.wallet.exchangeRates,\n});\n\nHeader.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n  emailGot: PropTypes.string.isRequired,\n};\n\nexport default connect(mapStateToProps, null)(Header);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass FormsInput extends React.Component {\n  render() {\n    const { onChange } = this.props;\n    return (\n      <>\n        <label htmlFor=\"input-valor\">\n          Valor\n          <input\n            type=\"number\"\n            id=\"input-valor\"\n            name=\"value\"\n            onChange={ onChange }\n          />\n        </label>\n        <label htmlFor=\"input-descrição\">\n          Descrição\n          <input\n            type=\"text\"\n            id=\"input-descrição\"\n            name=\"description\"\n            onChange={ onChange }\n          />\n        </label>\n      </>\n    );\n  }\n}\n\nFormsInput.propTypes = {\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default FormsInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass FormsSelect extends React.Component {\n  render() {\n    const { onChange, currencies, onClick } = this.props;\n    return (\n      <>\n        <label htmlFor=\"input-moeda\">\n          Moeda\n          <select id=\"input-moeda\" name=\"currency\" onChange={ onChange }>\n            { currencies.map((currencie) => (\n              <option\n                key={ currencie }\n              >\n                { currencie }\n              </option>\n            )) }\n          </select>\n        </label>\n        <label htmlFor=\"input-pagamento\">\n          Método de pagamento\n          <select id=\"input-pagamento\" name=\"method\" onChange={ onChange }>\n            <option>Dinheiro</option>\n            <option>Cartão de crédito</option>\n            <option>Cartão de débito</option>\n          </select>\n        </label>\n        <label htmlFor=\"input-categoria\">\n          Tag\n          <select id=\"input-categoria\" name=\"tag\" onChange={ onChange }>\n            <option>Alimentação</option>\n            <option>Lazer</option>\n            <option>Trabalho</option>\n            <option>Transporte</option>\n            <option>Saúde</option>\n          </select>\n        </label>\n        <button type=\"button\" onClick={ onClick }>Adicionar Despesa</button>\n      </>\n    );\n  }\n}\n\nFormsSelect.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  currencies: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default FormsSelect;\n","const getAPI = async () => {\n  const API = await fetch('https://economia.awesomeapi.com.br/json/all');\n  const APIjson = await API.json();\n  delete APIjson.USDT;\n  return APIjson;\n};\n\nexport default getAPI;\n","import getAPI from '../services/API';\nimport { LOADING, SUCCESS, FAIL } from './index';\n\nconst loading = () => ({\n  type: LOADING,\n});\n\nconst success = (payload) => ({\n  type: SUCCESS,\n  payload,\n});\n\nconst fail = (payload) => ({\n  type: FAIL,\n  payload,\n});\n\nconst fetchCoins = () => async (dispatch) => {\n  dispatch(loading());\n  try {\n    const funcgetAPI = await getAPI();\n    dispatch(success(Object.keys(funcgetAPI)));\n  } catch (error) {\n    dispatch(fail(error));\n  }\n  dispatch(loading());\n};\n\nexport default fetchCoins;\n","import getAPI from '../services/API';\nimport { ADD_EXPENSE, DELETE_EXPENSE } from '.';\n\nconst success = (payload) => ({\n  type: ADD_EXPENSE,\n  payload,\n});\n\nconst fetchPrices = (expense) => async (dispatch) => {\n  const exchangeRates = await getAPI();\n  const setExpense = { ...expense, exchangeRates };\n  dispatch(success(setExpense));\n};\n\nexport const deleteExpense = (payload) => ({\n  type: DELETE_EXPENSE,\n  payload,\n});\n\nexport default fetchPrices;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deleteExpense } from '../actions/addExpenses';\n\nclass Table extends React.Component {\n  render() {\n    const { expenses, deleteExp } = this.props;\n    return (\n      <table>\n        <tr>\n          <th>Descrição</th>\n          <th>Tag</th>\n          <th>Método de pagamento</th>\n          <th>Valor</th>\n          <th>Moeda</th>\n          <th>Câmbio utilizado</th>\n          <th>Valor convertido</th>\n          <th>Moeda de conversão</th>\n          <th>Editar/Excluir</th>\n        </tr>\n        { expenses.map((expense) => (\n          <tr key={ expense.id }>\n            <td>{ expense.description }</td>\n            <td>{ expense.tag }</td>\n            <td>{ expense.method }</td>\n            <td>{ expense.value }</td>\n            <td>{ expense.exchangeRates[expense.currency].name.split('/')[0] }</td>\n            <td>\n              { parseFloat(expense.exchangeRates[expense.currency].ask).toFixed(2) }\n            </td>\n            <td>\n              { parseFloat(expense.exchangeRates[expense.currency].ask * expense.value)\n                .toFixed(2) }\n            </td>\n            <td>Real</td>\n            <td>\n              <button type=\"button\">Editar</button>\n              <button\n                type=\"button\"\n                data-testid=\"delete-btn\"\n                onClick={ () => deleteExp(expense) }\n              >\n                Excluir\n              </button>\n            </td>\n          </tr>\n        )) }\n      </table>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteExp: (payload) => dispatch(deleteExpense(payload)),\n});\n\nTable.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n  deleteExp: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport FormsInput from '../components/FormsInput';\nimport FormsSelect from '../components/FormsSelect';\nimport fetchCoins from '../actions/addCurrencies';\nimport fetchPrices from '../actions/addExpenses';\nimport Table from '../components/Table';\n\nclass Wallet extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      value: 0,\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n    };\n\n    this.handleChanges = this.handleChanges.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount() {\n    const { fetchCurrencies } = this.props;\n    fetchCurrencies();\n  }\n\n  handleChanges({ target }) {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  }\n\n  handleClick() {\n    const { expenses, fetchExpenses } = this.props;\n    const id = expenses.length;\n    const newState = { ...this.state, id };\n    fetchExpenses(newState);\n  }\n\n  render() {\n    const { currencies } = this.props;\n    return (\n      <>\n        <Header />\n        <FormsInput onChange={ this.handleChanges } />\n        <FormsSelect\n          onChange={ this.handleChanges }\n          currencies={ currencies }\n          onClick={ this.handleClick }\n        />\n        <Table />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  emailGot: state.user.email,\n  currencies: state.wallet.currencies,\n  expenses: state.wallet.expenses,\n  exchangeRates: state.wallet.exchangeRates,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCurrencies: () => dispatch(fetchCoins()),\n  fetchExpenses: (expense) => dispatch(fetchPrices(expense)),\n});\n\nWallet.propTypes = {\n  fetchCurrencies: PropTypes.func.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n  fetchExpenses: PropTypes.func.isRequired,\n  currencies: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nclass App extends Component {\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/trybewallet\" component={ Login } />\n        <Route exact path=\"/carteira\" component={ Wallet } />\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\nimport { SET_EMAIL } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nconst reducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SET_EMAIL:\n    return { ...state, email: action.payload };\n  default:\n    return state;\n  }\n};\n\nexport default reducer;\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nimport { LOADING, SUCCESS, FAIL, ADD_EXPENSE, DELETE_EXPENSE } from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  loading: false,\n  error: '',\n};\n\nconst reducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case LOADING:\n    return { ...state, loading: !state.loading };\n  case FAIL:\n    return { ...state, error: action.payload };\n  case SUCCESS:\n    return { ...state, currencies: action.payload };\n  case ADD_EXPENSE:\n    return { ...state, expenses: [...state.expenses, action.payload] };\n  case DELETE_EXPENSE:\n    return {\n      ...state,\n      expenses: [...state.expenses.filter((element) => element !== action.payload)],\n    };\n  default:\n    return state;\n  }\n};\n\nexport default reducer;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\nconst rootReducer = combineReducers({\n  user,\n  wallet,\n});\n\nexport default rootReducer;\n","import { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}